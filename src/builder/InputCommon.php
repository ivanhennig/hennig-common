<?php

namespace Hennig\Builder;

class InputCommon extends Control
{
    const ALIGN_LEFT = "left";
    const ALIGN_RIGHT = "right";
    const ALIGN_CENTER = "center";

    const TYP_NUMBER = 'number';
    const TYP_SELECT = 'select';
    const TYP_TEXTAREA = 'textarea';
    const TYP_DATETIME = 'datetime';

    const ST_FLOAT = 'float';
    const ST_CURRENCY = 'currency';
    const ST_INTEGER = 'integer';
    const ST_PASSWORD = 'password';
    const ST_EMAIL = 'email';
    const ST_DATE = 'date';
    const ST_TIME = 'time';
    const ST_DATETIME = 'datetime';
    /**
     * Component type, default text
     * @var string
     */
    public $type = "text";
    public $subtype = "";
    /**
     * Uniq id, randomly created
     * @var string
     */
    public $id = "";
    /**
     * Texto, se informado, será posicionado abaixo do input
     * @var string
     */
    public $help = "";
    /**
     * Texto, se informado, será posicionado dentro do input
     * @var string
     */
    public $placeholder = "";
    public $align = InputCommon::ALIGN_LEFT;
    public $required = false;
    public $readonly = false;

    /**
     * @var string
     */
    public $grid_system = "offset-md-2 col-md-8 offset-lg-0 col-lg-6";

    /**
     * @var string
     */
    public $initialValue;

    /**
     * Texto, se informado, será posicionado abaixo do input
     * @var string
     */
    public function setHelp($help)
    {
        $this->help = $help;
        return $this;
    }

    /**
     * Bootstrap grid system
     *
     * Class prefix
     * .col-sm- .col-md- .col-lg- .col-xl-
     * >=540px  >=720px  >=960px  >=1140px
     *
     * @param string $grid_system
     */
    public function setGridSystem($grid_system)
    {
        $this->grid_system = $grid_system;
        return $this;
    }

    /**
     * @param bool $required
     * @return static
     */
    public function setRequired($required)
    {
        $this->required = $required;
        return $this;
    }

    /**
     * @param bool $readonly
     * @return InputCommon
     */
    public function setReadonly($readonly)
    {
        $this->readonly = $readonly;
        return $this;
    }

    /**
     * @param string $align
     * @return static
     */
    public function setAlign($align)
    {
        $this->align = $align;
        return $this;
    }

    /**
     * @param string $value
     * @return static
     */
    public function setInitialValue($value)
    {
        $this->initialValue = $value;
        return $this;
    }

    /**
     * @return Control
     */
    public function beforeJson()
    {
        if ($this->name === "_id") {//Forçar readonly
            $this->readonly = true;
        }
        return parent::beforeJson(); // TODO: Change the autogenerated stub
    }

}
